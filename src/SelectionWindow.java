/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;

/**
 *
 * @author dharmen
 */
public class SelectionWindow extends javax.swing.JApplet {

    /**
     * Initializes the applet SelectionWindow
     */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelectionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelectionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelectionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelectionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the applet */
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    initComponents();
                    cfr.createRecipeStructure();
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();

        jButton2.setText("Search");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane11.setViewportView(jTextArea1);

        jLabel1.setText("Enter Your Ingrediants");

        jLabel2.setText("Show Only");

        jCheckBox1.setText("Vegan");

        jCheckBox2.setText("No Pork");

        jCheckBox3.setText("Vegetarian");

        jCheckBox4.setText("No Beef");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox4)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setText("I am Allergic to");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "none", "mustard", "peanuts", "milk", "egg", "honey" }));

        jLabel4.setText("Cooking Time");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "10 minutes", "30 minutes", "1 hours", "more then 1 hours", " ", " " }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(18, 18, 18)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBox3, 0, 213, Short.MAX_VALUE)
                                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 55, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(82, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane11)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");
        String keyWord[] = jTextField1.getText().split(",");
        
       // System.out.println(" KeyWord = "+ keyWord+"\n type of food = "+typeOfFood +"\n SIZE = "+cfr.allRcps.size());
        int cnt = 0;
       // System.out.println("Selected Index = "+ jComboBox1.getSelectedIndex());
        for(RcpStructure data: cfr.allRcps)
        {
            boolean kwFlg = false;
            
            if(keyWord.length>0)
            {
                for(String kw: keyWord)
                {
                    if(data.recipeInstruction.contains(kw))
                    {
                        kwFlg = true;
                    }
                }
            }
            else
            {
                kwFlg = true;
            }
           boolean vgnFlg = true,vgFlg = true, noProk = false, noBeef = false;
           
           if(jCheckBox1.isSelected())
           {
               for(String kw: vegenList)
                {
                    if(data.recipeInstruction.contains(kw)|| data.Name.contains(kw)||data.ingredients.contains(kw))
                    {
                        vgnFlg = false;
                    }
                }
           }
           if(jCheckBox3.isSelected())
           {
               for(String kw:vegList )
                {
                    if(data.recipeInstruction.contains(kw))
                    {
                        vgFlg = false;
                    }
                }
           }
           if(jCheckBox2.isSelected())
           {
               
                    if(data.recipeInstruction.contains("pork")|| data.Name.contains("pork")||data.ingredients.contains("pork"))
                    {
                        noProk = true;
                    }
           }
            if(jCheckBox4.isSelected())
           {
               
                    if(data.recipeInstruction.contains("beef") || data.Name.contains("beef")||data.ingredients.contains("beef"))
                    {
                        noBeef = true;
                    }
           }
            
           boolean allergicFlg = false,timeFlg = true;
           
           if(jComboBox2.getSelectedIndex()>0)
           {
               
                    if(data.recipeInstruction.contains(jComboBox2.getSelectedItem().toString()))
                    {
                        allergicFlg = true;
                    }
           }
           if(jComboBox3.getSelectedIndex()>0)
           {
                    String timeval ="";
                    switch(jComboBox2.getSelectedIndex())
                    {
                        case 1:
                            timeval = "10";
                            break;
                        case 2:
                            timeval = "30";
                            break;
                        case 3:
                            timeval = "hour";
                            break;
                    }
               
                    if(data.cookTime.contains(timeval))
                    {
                        timeFlg = true;
                    }
                    else
                    {
                        timeFlg = false;
                    }
           }
            
           if( kwFlg && vgnFlg && vgFlg && !noProk && !noBeef && !allergicFlg && timeFlg)
           {
                jTextArea1.append("\nThe Recipe for "+data.Name+"\n"+data.recipeInstruction);
           }
           
           
           
            // data.printReceipe();
            
          /* 
           if(data.Name.contains(keyWord))
           {
               if(jComboBox1.getSelectedIndex()==2)
               {
                   jTextArea1.append("\nThe Recipe for "+data.Name+"\n"+data.recipeInstruction);
               }
               if(jComboBox1.getSelectedIndex()==1)
               {
                   boolean flg = false;
                   for(String kwrd: nonVegList)
                   {
                       if(data.Name.contains(kwrd) || data.ingredients.contains(kwrd))
                       {
                           flg = true;
                       }
                   }
                   if(flg)
                   {
                       jTextArea1.append("\nThe Recipe for "+data.Name+"\n"+data.recipeInstruction);
                   }
               }
               if(jComboBox1.getSelectedIndex()==0)
               {
                   boolean flg = false;
                   for(String kwrd: nonVegList)
                   {
                       if(data.Name.contains(kwrd) || data.ingredients.contains(kwrd))
                           flg = true;
                   }
                   if(!flg)
                   {
                       jTextArea1.append("\nThe Recipe for "+data.Name+"\n"+data.recipeInstruction);
                   }
               }
              // System.out.println(data.Name);
               
           }*/
            
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

CsvFileReader cfr = new CsvFileReader();
    String vegenList[] = {"chicken", "fish", "lamb", "duck", "turkey", "beef", "shrimps", "tuna", "crab", "egg", "milk", "cheese", "cream", "honey", "gelatin","salmon"};
    //String nonVegList[] = {"beef","pork","egg","meat","turkey"};
    String vegList[] = {"chicken", "fish", "lamb", "duck", "turkey", "beef", "shrimps", "tuna", "crab"};
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
